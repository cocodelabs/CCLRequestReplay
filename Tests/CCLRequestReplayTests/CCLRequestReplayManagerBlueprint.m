//
//  CCLRequestReplayManagerBlueprint.m
//  CCLRequestReplay
//
//  Created by Kyle Fuller on 20/04/2014.
//
//

#define EXP_SHORTHAND YES

#import <Foundation/Foundation.h>
#import <Specta/Specta.h>
#import <Expecta/Expecta.h>

#import <CCLRequestReplay/CCLRequestReplayManager+Blueprint.h>

static NSString * const BlueprintFixture = @"";


SpecBegin(CCLRequestReplayManagerBlueprint)

describe(@"CLRequestReplayManager", ^{
    __block CCLRequestReplayManager *manager;

    beforeEach(^{
        manager = [[CCLRequestReplayManager alloc] init];
    });

    it(@"should load a blueprint with all recordings", ^{
        NSData *data = [[NSData alloc] initWithBase64EncodedString:BlueprintFixture options:0];

        NSError *error;
        BOOL didAddRecordings = [manager addRecordingsFromBlueprintData:data error:&error];

        expect(didAddRecordings).to.beTruthy();
        expect(error).to.beNil();
        expect([[manager recordings] count]).to.equal(6);
    });
});

SpecEnd
